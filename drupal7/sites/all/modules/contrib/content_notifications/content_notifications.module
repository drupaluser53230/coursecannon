<?php

/**
 * @file
 * Module hooks and common functions.
 */

/**
 * Implements hook_permission().
 */
function content_notifications_permission() {
  return array(
    'administer content notifications' => array(
      'title' => t('Administer content notifications'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function content_notifications_menu() {
  $items['content-notifications/get/json'] = array(
    'page callback' => 'content_notifications_return_notifications_json',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/content-notifications'] = array(
    'title' => 'Content Notifications',
    'description' => 'Set content notifications settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_notifications_admin_form'),
    'access arguments' => array('administer content notifications'),
    'file' => 'content_notifications.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function content_notifications_theme($existing, $type, $theme, $path) {
  return array(
    'content_notification' => array(
      'variables' => array(
        'content' => NULL,
        'attributes' => array('class' => array('marker', 'badge')),
      ),
    )
  );
}
/**
 * Theming notification badges
 */
function theme_content_notification($variables) {
  return ' <span' . drupal_attributes($variables['attributes']) . '>' . $variables['content'] . '</span>';
}

/**
 * Implements hook_field_extra_fields().
 */
function content_notifications_field_extra_fields() {

  $types = node_type_get_types();
  $extra = array();
  foreach ($types as $type_name => $type) {
    $extra['node'][$type_name]['display'] = array(
      'content_status_placeholder' => array(
        'label' => t('Content status'),
        'description' => t('Placeholder for display node status : new or updated'),
        'weight' => 10,
        'visible' => FALSE,
      ),
    );
  }

  return $extra;

}

/**
 * Implements hook_node_view().
 */
function content_notifications_node_view($node, $view_mode) {
  $config = field_bundle_settings('node', $node->type);

  if (isset($config['extra_fields']['display']['content_status_placeholder'][$view_mode]['visible']) && !empty($config['extra_fields']['display']['content_status_placeholder'][$view_mode]['visible'])) {
    $node->content['content_status_placeholder'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => array('content-status-node-' . $node->nid),
        'class' => array('content-status-placeholder'),
        'data-nid' => $node->nid,
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function content_notifications_preprocess_page(&$variables) {
  if (user_is_logged_in()) {
    drupal_add_js(drupal_get_path('module', 'content_notifications') . '/js/content_notifications.js', array('type' => 'file', 'scope' => 'footer'));
  }
}

/**
 * Menu callback that respond for json call.
 */
function content_notifications_return_notifications_json() {
  $return = array();

  if (isset($_POST['nodes']) && is_array($_POST['nodes'])) {
    $nids = array_values($_POST['nodes']);
    $nodes = node_load_multiple($nids);

    foreach ($_POST['nodes'] as $id => $node_nid) {
      if (isset($nodes[$node_nid])){
        $node = $nodes[$node_nid];
        if ($status = content_notifications_status($node)) {
          $return['nodes'][$id] = theme('content_notification', array('content' => $status));
        }
      }
    }
  }

  drupal_json_output($return);
}

/**
 * Determines the type of marker to be displayed for a given node.
 *
 * @param node
 *   Node
 *
 * @return string
 *
 */
function content_notifications_status($node) {
  global $user;
  $cache = &drupal_static(__FUNCTION__, array());

  $display = variable_get('content_notifications_status_display', array('new' => 1, 'updated' => 0));
  $time_limit = _content_notifications_get_time_limit();
  $nid = $node->nid;

  if (!$user->uid) {
    return '';
  }
  if (!isset($cache[$nid])) {
    $cache[$nid] = node_last_viewed($nid);
  }
  if ($display['new'] && $cache[$nid] == 0 && $node->created > $time_limit) {
    return t('new');
  }
  elseif ($display['updated'] && $node->changed > $cache[$nid] && $node->changed > $time_limit) {
    return t('updated');
  }

  return '';
}

/**
 * Return the minimum timestamp to compare with.
 *
 * @return int
 */
function _content_notifications_get_time_limit(){
  $days_limits = variable_get('content_notifications_days_limit', 7);
  $timestamp = strtotime('-' . $days_limits . ' day', REQUEST_TIME);
  return $timestamp;
}

/**
 * Implements hook_node_type_insert().
 */
function content_notifications_node_type_insert($info) {
  content_notifications_hide_new_extra_field('node', $info->type, 'content_status_placeholder');
}

/**
 * Utility function to hide any newly created extra_fields.
 *
 * @param string $entity_type
 *   Entity type on which the new extra field will reside.
 *
 * @param string $bundle
 *   Bundle on which the new extra field will reside.
 *
 * @param string $field_name
 *   Machine name of extra field.
 */
function content_notifications_hide_new_extra_field($entity_type, $bundle, $field_name) {
  $settings = field_bundle_settings($entity_type, $bundle);
  $settings_updated = FALSE;
  $entity_info = entity_get_info($entity_type, $bundle);
  $view_modes = array_keys($entity_info['view modes']);
  if (!in_array('default', $view_modes)) {
    $view_modes[] = 'default';
  }
  foreach ($view_modes as $view_mode) {
    if (!isset($settings['extra_fields']['display'][$field_name][$view_mode])) {
      $settings_updated = TRUE;
      $settings['extra_fields']['display'][$field_name][$view_mode] = array(
        'weight' => 100,
        'visible' => FALSE,
      );
    }
  }
  if ($settings_updated) {
    field_bundle_settings($entity_type, $bundle, $settings);
  }
}
